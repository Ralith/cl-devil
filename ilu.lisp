;;;; cl-devil -- DevIL binding for CL.  See README for licensing information.

(in-package :ilu)

(define-foreign-library ilu
  (:unix (:or "libILU" "libILUT.so.1"))
  (:windows "ILU.dll")
  (t (:default "libILU")))
(use-foreign-library ilu)

(defcenum mode
  (:file-overwrite #x0620)
  (:file-mode #x0621)
  (:conv-pal #x0630)
  (:use-key-color #x0635)
  (:png-alpha-index #x0724)
  (:version-num #x0DE2)
  (:image-width #x0DE4)
  (:image-height #x0DE5)
  (:image-depth #x0DE6)
  (:image-size-of-data #x0DE7)
  (:image-bpp #x0DE8)
  (:image-bytes-per-pixel #x0DE8)
  (:image-bits-per-pixel #x0DE9)
  (:image-format #x0DEA)
  (:image-type #x0DEB)
  (:palette-type #x0DEC)
  (:palette-size #x0DED)
  (:palette-bpp #x0DEE)
  (:palette-num-cols #x0DEF)
  (:palette-base-type #x0DF0)
  (:num-images #x0DF1)
  (:num-mipmaps #x0DF2)
  (:num-layers #x0DF3)
  (:active-image #x0DF4)
  (:active-mipmap #x0DF5)
  (:active-layer #x0DF6)
  (:cur-image #x0DF7)
  (:image-duration #x0DF8)
  (:image-planesize #x0DF9)
  (:image-bpc #x0DFA)
  (:image-offx #x0DFB)
  (:image-offy #x0DFC)
  (:image-cubeflags #x0DFD)
  (:image-origin #x0DFE)
  (:image-channels #x0DFF))

(defcfun ("iluInit" init) :void)

(defcfun ("iluAlienify" alienify) :boolean)
(defcfun ("iluBlurAvg" blur-avg) :boolean (iter :uint))
(defcfun ("iluBlurGaussian" blur-gaussian) :boolean (iter :uint))
(defcfun ("iluBuildMipmaps" build-mipmaps) :boolean)
(defcfun ("iluColoursUsed" colours-used) :boolean)
(defcfun ("iluColoursUsed" colors-used) :boolean)
(defcfun ("iluCompareImage" compare-image) :boolean (comp :uint))
(defcfun ("iluContrast" contrast) :boolean (contrast :float))
(defcfun ("iluCrop" crop) :boolean
  (x-offset :uint) (y-offset :uint) (z-offset :uint)
  (width :uint) (height :uint) (depth :uint))
(defcfun ("iluDeleteImage" delete-image) :void (id :uint))
(defcfun ("iluEdgeDetectP" edge-detect-p) :boolean)
(defcfun ("iluEdgeDetectS" edge-detect-s) :boolean)
(defcfun ("iluEmboss" emboss) :boolean)
(defcfun ("iluEnlargeCanvas" enlarge-canvas) :boolean
  (width :uint) (height :uint) (depth :uint))
(defcfun ("iluErrorString" error-string) :string)
(defcfun ("iluFlipImage" flip-image) :boolean)
#-win32
(defcfun ("iluGammaCorrectInter" gamma-correct-inter) :boolean (gamma :float))
#-win32
(defcfun ("iluGammaCorrectScale" gamma-correct-scale) :boolean (gamma :float))
(defcfun ("iluGenImage" gen-image) :uint)
;; (defcfun ("iluGetImageInfo" get-image-info) :void (info :pointer))
(defcfun ("iluGetInteger" get-integer) :int (mode mode))
;; (defcfun ("iluGetString" get-string) :string)
;; (defcfun ("iluImageParameter" image-parameter) :void (pname pname) (param param))
(defcfun ("iluInvertAlpha" invert-alpha) :boolean)
(defcfun ("iluMirror" mirror) :boolean)
(defcfun ("iluNegative" negative) :boolean)
(defcfun ("iluNoisify" noisify) :boolean
  (x-dim :float) (y-dim :float) (z-dim :float))
(defcfun ("iluPixelize" pixelize) :boolean (pix-size :uint))
(defcfun ("iluRotate" rotate) :boolean (angle :float))
(defcfun ("iluSaturate4f" saturate-4f) :boolean
  (r :float) (g :float) (b :float))
(defun saturate (&key (r 1.0) (g 1.0) (b 1.0))
  (saturate-4f r g b))
(defcfun ("iluScale" scale) :boolean
  (width :uint) (height :uint) (depth :uint))
(defcfun ("iluSharpen" sharpen) :boolean
  (factor :float) (iter :uint))
(defcfun ("iluSwapColours" swap-colours) :boolean)
(defcfun ("iluSwapColours" swap-colors) :boolean)

